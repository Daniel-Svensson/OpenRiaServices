<#+
	/// <summary>
    /// Generates the DomainContext class constructors.
    /// </summary>	
	protected void GenerateServiceContractInterface()
	{	
		HashSet<Type> registeredServiceTypes = new HashSet<Type>();
		List<DomainOperationEntry> contractMethods = new List<DomainOperationEntry>();		
		foreach (DomainOperationEntry operation in this.DomainServiceDescription.DomainOperationEntries
            .Where(op => op.Operation == DomainOperation.Query || op.Operation == DomainOperation.Invoke || op.Operation == DomainOperation.Custom)
            .OrderBy(op => op.Name))
        {
            if (operation.Operation == DomainOperation.Custom)
            {
                IEnumerable<Attribute> knownTypeServiceAttributes = this.GetContractServiceKnownTypes(operation, registeredServiceTypes);
				this.GenerateAttributes(knownTypeServiceAttributes, true);
            }
            else
            {
                contractMethods.Add(operation);
            }
        }

#>
[System.ServiceModel.ServiceContract()]
public interface <#= this.ContractInterfaceName #>
<#+ 
		this.GenerateOpeningBrace();
		foreach(DomainOperationEntry operation in contractMethods)
		{
			this.GenerateContractMethod(operation);
		}
		
		if (this.DomainServiceDescription.DomainOperationEntries
            .Where(op => (op.Operation == DomainOperation.Delete || op.Operation == DomainOperation.Insert 
                        || op.Operation == DomainOperation.Update || op.Operation == DomainOperation.Custom)).Any())
        {
            this.GenerateContractSubmitChangesMethod();
        }
		this.GenerateClosingBrace();
	}
	
	private void GenerateContractMethod(DomainOperationEntry operation)
	{
#>
[OpenRiaServices.Client.HasSideEffects(<#= DomainContextGenerator.OperationHasSideEffects(operation).ToString().ToLower() #>)]
<#+
		this.GenerateContractMethodAttributes(operation.Name);
        string returnTypeName = CSharpDomainContextGenerator.GetEndOperationReturnType(operation);
        // Async i namn???
#>
System.Threading.Tasks.Task<<#= returnTypeName #>>  <#= operation.Name #>(
<#+
		foreach (DomainOperationParameter parameter in operation.Parameters)
        {
            Type parameterType = CodeGenUtilities.TranslateType(parameter.ParameterType);
#>
<#= CodeGenUtilities.GetTypeName(parameterType) #> <#= parameter.Name #>,
<#+
        }
#>);
	}
	
	private void GenerateContractSubmitChangesMethod()
	{
		this.GenerateContractMethodAttributes("SubmitChanges");
#>
System.Threading.Tasks.Task<IEnumerable<ChangeSetEntry>> SubmitChanges(IEnumerable<ChangeSetEntry> changeSet);
<#+
	}
	
	private void GenerateContractMethodAttributes(string operationName)
	{
		string domainServiceName = this.DomainServiceDescription.DomainServiceType.Name;
		string faultTypeName = typeof(DomainServiceFault).Name;
		string actionString = string.Format(CultureInfo.InvariantCulture, DomainContextGenerator.DefaultActionSchema, domainServiceName, operationName);
		string replyActionString = string.Format(CultureInfo.InvariantCulture, DomainContextGenerator.DefaultReplyActionSchema, domainServiceName, operationName);
		string faultActionString = string.Format(CultureInfo.InvariantCulture, DomainContextGenerator.DefaultFaultActionSchema, domainServiceName, operationName, faultTypeName);
		
#>
[OperationContract(AsyncPattern=true, Action="<#= actionString #>", ReplyAction="<#= replyActionString #>")]	
<#+
	}
#>
